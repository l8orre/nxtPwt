# -*- coding: utf-8 -*-
"""
 Copyright (c) 2014 l8orre

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 
"""


from PyQt4 import QtGui, Qt, QtCore
from PyQt4.QtCore import QObject , pyqtSignal, pyqtSlot, SIGNAL
import time
from nxtPwt.nxtApiPrototypes import nxtQs

 
class nxtWin7Control(QObject):
    """ class nxtWin7Control(): here THIS  is  API ACCESS WITH PARAMS TAKEN FROM THE qLineEdits . 
    prototypes are filled into the qLinedits left column, have to be entered into right column""" 
    

    UC30_apiAcc = pyqtSignal(object) # (object)
        
        
    def __init__(self, app): #, application
        super(QObject, self, ).__init__()

        import nxtPwt.ui_nxtWin7 as nxtWin7  # the QtCreator-generated Widget.py!!
                
        ui = nxtWin7.Ui_MainWindow() # Ui_MainWindow() is the autogenerated class in m2def.py
                
        self.ui_nxtWin7 = ui 
                
        self.app = app  # 
                
        self.app.nxtWin7 = self # make this   WinControl1  known  in the app namespace.  When this Win throws sigs, they can be recvd anywhere where this isknown.
        # this makes the ui_MainWin including the Widgets known to the useCase (s)
        # can be done here or in init().         self.app.sessMan.UCTest1.initWin7(self.app.nxtWin7, ui )
        self.apiCalls = nxtQs() # the api prototypes to compose as dicts key-val
        # make this window known in the useCases that feed it.
        #self.app.sessMan.ucTest1.initWin7(self.app.nxtWin7, ui )
        self.app.sessMan.uc30.initWin7(self.app.nxtWin7, ui )
        self.account = app.sessMan.uc2_accHndlr.accRes   # just to have the name shortewr

        self.localTimer7 = QtCore.QTimer() #  local TIMER
        self.localTime7 = 2000
        
        
    def init(self): 
        """ nxtWin7""" 
        ui = self.ui_nxtWin7
 
        # currently callbacks for 55 api calls 040714
        #
        # These buttons prepare the query by filling the lineedits with the query components:
        #

        QtCore.QObject.connect(ui.pb_broadcastTransaction , SIGNAL("clicked()"), self.broadcastTransactionCB )

        QtCore.QObject.connect(ui.pb_cancelAskOrder , SIGNAL("clicked()"), self.cancelAskOrderCB )

        QtCore.QObject.connect(ui.pb_cancelBidOrder , SIGNAL("clicked()"), self.cancelBidOrderCB )

        QtCore.QObject.connect(ui.pb_castVote , SIGNAL("clicked()"), self.castVoteCB ) #49

        QtCore.QObject.connect(ui.pb_createPoll , SIGNAL("clicked()"), self.createPollCB ) #51

        QtCore.QObject.connect(ui.pb_decodeHallmark , SIGNAL("clicked()"), self.decodeHallmarkCB )

        QtCore.QObject.connect(ui.pb_decodeToken , SIGNAL("clicked()"), self.decodeTokenCB )

        QtCore.QObject.connect(ui.pb_decryptFrom , SIGNAL("clicked()"), self.decryptFromCB )

        QtCore.QObject.connect(ui.pb_dgsDelisting , SIGNAL("clicked()"), self.dgsDelistingCB )

        QtCore.QObject.connect(ui.pb_dgsDelivery , SIGNAL("clicked()"), self.dgsDeliveryCB )

        QtCore.QObject.connect(ui.pb_dgsFeedback , SIGNAL("clicked()"), self.dgsFeedbackCB )

        QtCore.QObject.connect(ui.pb_dgsListing, SIGNAL("clicked()"), self.dgsListingCB )

        QtCore.QObject.connect(ui.pb_dgsPriceChange , SIGNAL("clicked()"), self.dgsPriceChangeCB )

        QtCore.QObject.connect(ui.pb_dgsPurchase , SIGNAL("clicked()"), self.dgsPurchaseCB )

        QtCore.QObject.connect(ui.pb_dgsQuantityChange , SIGNAL("clicked()"), self.dgsQuantityChangeCB )

        QtCore.QObject.connect(ui.pb_dgsRefund , SIGNAL("clicked()"), self.dgsRefundCB )

        QtCore.QObject.connect(ui.pb_encryptTo , SIGNAL("clicked()"), self.encryptToCB )

        QtCore.QObject.connect(ui.pb_generateToken , SIGNAL("clicked()"), self.generateTokenCB ) #46

        QtCore.QObject.connect(ui.pb_getAccount , SIGNAL("clicked()"), self.getAccountCB ) #42
        QtCore.QObject.connect(ui.pb_getAccount_2 , SIGNAL("clicked()"), self.getAccountCB ) #42

        QtCore.QObject.connect(ui.pb_getAccountBlockIds , SIGNAL("clicked()"), self.getAccountBlockIdsCB )

        QtCore.QObject.connect(ui.pb_getAccountCurrentBidOrderIds , SIGNAL("clicked()"), self.getAccountCurrentBidOrderIdsCB  )

        QtCore.QObject.connect(ui.pb_getAccountCurrentAskOrderIds , SIGNAL("clicked()"), self.getAccountCurrentAskOrderIdsCB )

        QtCore.QObject.connect(ui.pb_getAccountId , SIGNAL("clicked()"), self.getAccountIdCB )

        QtCore.QObject.connect(ui.pb_getAccountPublicKey , SIGNAL("clicked()"), self.getAccountPublicKeyCB )

        QtCore.QObject.connect(ui.pb_getAccountTransactionIds , SIGNAL("clicked()"), self.getAccountTransactionIdsCB )

        QtCore.QObject.connect(ui.pb_getAlias , SIGNAL("clicked()"), self.getAliasCB ) #51

        QtCore.QObject.connect(ui.pb_getAliases , SIGNAL("clicked()"), self.getAliasesCB )

        QtCore.QObject.connect(ui.pb_getAllAssets , SIGNAL("clicked()"), self.getAllAssetsCB ) #50

        QtCore.QObject.connect(ui.pb_getAllOpenOrders , SIGNAL("clicked()"), self.getAllOpenOrdersCB ) #52

        QtCore.QObject.connect(ui.pb_getAllTrades , SIGNAL("clicked()"), self.getAllTradesCB ) #55

        QtCore.QObject.connect(ui.pb_getAskOrder , SIGNAL("clicked()"), self.getAskOrderCB )

        QtCore.QObject.connect(ui.pb_getAskOrderIds , SIGNAL("clicked()"), self.getAskOrderIdsCB )

        QtCore.QObject.connect(ui.pb_getAskOrders , SIGNAL("clicked()"), self.getAskOrdersCB )

        QtCore.QObject.connect(ui.pb_getAsset , SIGNAL("clicked()"), self.getAssetCB )

        QtCore.QObject.connect(ui.pb_getAssetIds , SIGNAL("clicked()"), self.getAssetIdsCB )

        QtCore.QObject.connect(ui.pb_getAssets , SIGNAL("clicked()"), self.getAssetsCB ) #50

        QtCore.QObject.connect(ui.pb_getBalance , SIGNAL("clicked()"), self.getBalanceCB )

        QtCore.QObject.connect(ui.pb_getBidOrder , SIGNAL("clicked()"), self.getBidOrderCB )

        QtCore.QObject.connect(ui.pb_getBidOrderIds , SIGNAL("clicked()"), self.getBidOrderIdsCB )

        QtCore.QObject.connect(ui.pb_getBidOrders , SIGNAL("clicked()"), self.getBidOrdersCB )

        QtCore.QObject.connect(ui.pb_getBlock , SIGNAL("clicked()"), self.getBlockCB )

        QtCore.QObject.connect(ui.pb_getBlockId , SIGNAL("clicked()"), self.getBlockIdCB )

        QtCore.QObject.connect(ui.pb_getBlockchainStatus , SIGNAL("clicked()"), self.getBlockchainStatusCB )

        QtCore.QObject.connect(ui.pb_getConstants , SIGNAL("clicked()"), self.getConstantsCB )

        QtCore.QObject.connect(ui.pb_getConstants , SIGNAL("clicked()"), self.getConstantsCB )

        QtCore.QObject.connect(ui.pb_getDGSGood , SIGNAL("clicked()"), self.getDGSGoodCB )

        QtCore.QObject.connect(ui.pb_getDGSGoods , SIGNAL("clicked()"), self.getDGSGoodsCB )

        QtCore.QObject.connect(ui.pb_getDGSPendingPurchases , SIGNAL("clicked()"), self.getDGSPendingPurchasesCB )

        QtCore.QObject.connect(ui.pb_getDGSPurchase , SIGNAL("clicked()"), self.getDGSPurchaseCB )

        QtCore.QObject.connect(ui.pb_getDGSPurchases , SIGNAL("clicked()"), self.getDGSPurchasesCB )

        QtCore.QObject.connect(ui.pb_getForging , SIGNAL("clicked()"), self.getForgingCB ) #54

        QtCore.QObject.connect(ui.pb_getGuaranteedBalance , SIGNAL("clicked()"), self.getGuaranteedBalanceCB )

        QtCore.QObject.connect(ui.pb_getMyInfo , SIGNAL("clicked()"), self.getMyInfoCB )

        QtCore.QObject.connect(ui.pb_getNextBlockGenerators , SIGNAL("clicked()"), self.getNextBlockGeneratorsCB )

        QtCore.QObject.connect(ui.pb_getPeer , SIGNAL("clicked()"), self.getPeerCB )

        QtCore.QObject.connect(ui.pb_getPeers , SIGNAL("clicked()"), self.getPeersCB )

        QtCore.QObject.connect(ui.pb_getPoll , SIGNAL("clicked()"), self.getPollCB ) #48

        QtCore.QObject.connect(ui.pb_getPollIds , SIGNAL("clicked()"), self.getPollIdsCB ) #47

        QtCore.QObject.connect(ui.pb_getState , SIGNAL("clicked()"), self.getStateCB )
        QtCore.QObject.connect(ui.pb_getState_2 , SIGNAL("clicked()"), self.getStateCB )

        QtCore.QObject.connect(ui.pb_getTime , SIGNAL("clicked()"), self.getTimeCB )

        QtCore.QObject.connect(ui.pb_getTrades , SIGNAL("clicked()"), self.getTradesCB ) #43

        QtCore.QObject.connect(ui.pb_getTransaction , SIGNAL("clicked()"), self.getTransactionCB )
        QtCore.QObject.connect(ui.pb_getTransaction_2 , SIGNAL("clicked()"), self.getTransactionCB )

        QtCore.QObject.connect(ui.pb_getTransactionBytes , SIGNAL("clicked()"), self.getTransactionBytesCB )

        QtCore.QObject.connect(ui.pb_getUnconfirmedTransactionIds , SIGNAL("clicked()"), self.getUnconfirmedTransactionIdsCB )

        QtCore.QObject.connect(ui.pb_getUnconfirmedTransactions , SIGNAL("clicked()"), self.getUnconfirmedTransactionsCB )

        QtCore.QObject.connect(ui.pb_issueAsset , SIGNAL("clicked()"), self.issueAssetCB )

        QtCore.QObject.connect(ui.pb_leaseBalance , SIGNAL("clicked()"), self.leaseBalanceCB ) #56

        QtCore.QObject.connect(ui.pb_markHost , SIGNAL("clicked()"), self.markHostCB )

        QtCore.QObject.connect(ui.pb_parseTransaction , SIGNAL("clicked()"), self.parseTransactionCB ) #50

        QtCore.QObject.connect(ui.pb_placeAskOrder , SIGNAL("clicked()"), self.placeAskOrderCB )

        QtCore.QObject.connect(ui.pb_placeBidOrder , SIGNAL("clicked()"), self.placeBidOrderCB )

        QtCore.QObject.connect(ui.pb_readEncryptedNote , SIGNAL("clicked()"), self.readEncryptedNoteCB )

        QtCore.QObject.connect(ui.pb_rsConvert , SIGNAL("clicked()"), self.rsConvertCB )

        QtCore.QObject.connect(ui.pb_sellAlias , SIGNAL("clicked()"), self.sellAliasCB )

        QtCore.QObject.connect(ui.pb_sendEncryptedNote , SIGNAL("clicked()"), self.sendEncryptedNoteCB )

        QtCore.QObject.connect(ui.pb_sendMessage , SIGNAL("clicked()"), self.sendMessageCB )

        QtCore.QObject.connect(ui.pb_sendMoney , SIGNAL("clicked()"), self.sendMoneyCB )

        QtCore.QObject.connect(ui.pb_setAccountInfo , SIGNAL("clicked()"), self.setAccountInfoCB ) #57

        QtCore.QObject.connect(ui.pb_setAlias , SIGNAL("clicked()"), self.setAliasCB )

        QtCore.QObject.connect(ui.pb_signTransaction , SIGNAL("clicked()"), self.signTransactionCB ) #50

        QtCore.QObject.connect(ui.pb_startForging , SIGNAL("clicked()"), self.startForgingCB ) #44

        QtCore.QObject.connect(ui.pb_stopForging , SIGNAL("clicked()"), self.stopForgingCB ) #45

        QtCore.QObject.connect(ui.pb_transferAsset , SIGNAL("clicked()"), self.transferAssetCB )


 

        # local ctrl widgets init their functions:

        QtCore.QObject.connect(ui.pb_sendQuery , SIGNAL("clicked()"), self.makeCallCB) # <- this constructs and sends the Query

        QtCore.QObject.connect(ui.pb_clearText , SIGNAL("clicked()"), self.clearText_CB) # <- this constructs and sends the Query
        QtCore.QObject.connect(ui.lineEdit_pollTimer7, SIGNAL("returnPressed()"), self.setPollTimer1CB) 

        QtCore.QObject.connect(ui.gb_poll7 , SIGNAL("clicked()"), self.togglePoll7_CB )

        QtCore.QObject.connect(ui.pb_pullData1 , SIGNAL("clicked()"), self.pullData1_CB ) #  same CB!
        #
        #QtCore.QObject.connect(ui.lineEdit_nxtServer1, SIGNAL("returnPressed()"), self.lineEdit_nxtServer1)
        QtCore.QObject.connect(ui.lineEdit_account7,    SIGNAL("returnPressed()"), self.lineEdit_account7)  
        QtCore.QObject.connect(ui.lineEdit_passPhr7,    SIGNAL("returnPressed()"), self.lineEdit_passPhr7)  
        
        # polling timer: LOCAL!?!?!
        self.pollTimer1 = QtCore.QTimer()
        self.pollTime1 = 5000
        ui.lineEdit_pollTimer7.setText( str(self.pollTime1 ))
        QtCore.QObject.connect(self.pollTimer1, QtCore.SIGNAL("timeout()"), self.nxtPoll1CB) # LOCALTIMER
        #
        # local ctrl widgets init values and display properties:
        # 
        ui.lcdNumber_time7.setDigitCount(8)        #
        ui.lcdNumber_time7.setSegmentStyle(2)

        ui.lineEdit1_nxtQ14_Val14.setEchoMode(QtGui.QLineEdit.Password) # this is exclusively used for PWs

        #print(self.app.sessMan.activeNRS.comp['serverAddr'])
        newConn = self.app.sessMan.activeNRS.comp['url']#[-5:] # - '/nxt?'
        ui.lineEdit_nxtServer.setText(newConn)

        ui.lineEdit_passPhr7.setText(self.account.data['secretPhrase'])
        self.blinkerCols = [Qt.Qt.darkYellow, Qt.Qt.magenta]
        ui.kled_poll7.setColor(Qt.Qt.darkBlue)
        ui.gb_poll7.setChecked(False)
        ui.lineEdit_pollTimer7.setText(str(self.pollTime1))
        #
        # these lists are used to collect the query components. by filling with the keys for the different reqs:
        self.nxtQ_lineEdits=[ ui.lineEdit1_nxtQ1, \
                              ui.lineEdit1_nxtQ2, \
                              ui.lineEdit1_nxtQ3, \
                              ui.lineEdit1_nxtQ4, \
                              ui.lineEdit1_nxtQ5, \
                              ui.lineEdit1_nxtQ6, \
                              ui.lineEdit1_nxtQ7, \
                              ui.lineEdit1_nxtQ8, \
                              ui.lineEdit1_nxtQ9, \
                              ui.lineEdit1_nxtQ10, \
                              ui.lineEdit1_nxtQ11, \
                              ui.lineEdit1_nxtQ12, \
                              ui.lineEdit1_nxtQ13, \
                              ]

        self.nxtQ_lineEdits_Vals=[ ui.lineEdit1_nxtQ1_Val1, \
                                   ui.lineEdit1_nxtQ2_Val2, \
                                   ui.lineEdit1_nxtQ3_Val3, \
                                   ui.lineEdit1_nxtQ4_Val4, \
                                   ui.lineEdit1_nxtQ5_Val5, \
                                   ui.lineEdit1_nxtQ6_Val6, \
                                   ui.lineEdit1_nxtQ7_Val7, \
                                   ui.lineEdit1_nxtQ8_Val8, \
                                   ui.lineEdit1_nxtQ9_Val9,\
                                   ui.lineEdit1_nxtQ10_Val10,\
                                   ui.lineEdit1_nxtQ11_Val11,\
                                   ui.lineEdit1_nxtQ12_Val12,\
                                   ui.lineEdit1_nxtQ13_Val13,\
                                ]




############################
############################
############################
##########   Callbacks


    ########################
    # query buttons arrys
    ########################



    #def lineEdit_nxtServer1(self):
    #    ui = self.ui_nxtWin7
        #        self.app.sessMan.activeNRS.comp['serverP'] = ui.lineEdit_nxtServer1.text()  # + 'nxt?'


    def pullData1_CB(self):
        ui = self.ui_nxtWin7
        ui.lineEdit_sessDat1.setText("todo...")

    def lineEdit_account7(self):
        ui =  self.ui_nxtWin7
        ui.lineEdit_account7.text()


    def lineEdit_passPhr7(self):
        ui =  self.ui_nxtWin7
        self.account.data['secretPhrase'] =  ui.lineEdit_passPhr7.text()
        ui.lineEdit1_nxtQ8_Val8.setText( ui.lineEdit_passPhr7.text())

    def clearText_CB(self):
        ui = self.ui_nxtWin7
        ui.textEdit_NRSRaw1.clear()


    def togglePoll7_CB(self):
        ui = self.ui_nxtWin7
        if not ui.gb_poll7.isChecked():
            print("OFF")
            self.pollTimer1.stop()
            ui.textEdit_NRSRaw1.append( " stop polling...")
            return 0
        elif ui.gb_poll7.isChecked():
            print("ON")
            self.pollTimer1.start(int ( self.pollTime1 ) )
            ui.textEdit_NRSRaw1.append( "start polling...")
            return 0


    def nxtPoll1CB(self):
        ui =  self.ui_nxtWin7
        currtime = time.strftime('%H:%M:%S')
        ui.lcdNumber_time7.display(currtime)
        ui.textEdit_NRSRaw1.append( "############################         --->   "+currtime)
        ui.kled_poll7.setColor(self.blinkerCols[0]) # activity indicator
        self.blinkerCols.reverse()
        self.makeCallCB() # now as if button clicked

    def setPollTimer1CB(self,):
        ui = self.ui_nxtWin7
        self.pollTime1 = ui.lineEdit_pollTimer7.text()
        self.togglePoll7_CB()
        #self.stopPoll1_CB()
        #self.startPoll1_CB()
        self.confLED7_cy()
        return 0

    def confLED7_OK(self):
        ui = self.ui_nxtWin7
        ui.kled_poll7.setColor(Qt.Qt.green)
        self.localTimer7.singleShot(1000,self.confLED7_off)
    def confLED7_notOK(self):
        ui = self.ui_nxtWin7
        ui.kled_poll7.setColor(Qt.Qt.red)
        self.localTimer7.singleShot(1000,self.confLED7_off)
    def confLED7_cy(self):
        ui = self.ui_nxtWin7
        ui.kled_poll7.setColor(Qt.Qt.cyan)
        self.localTimer7.singleShot(500,self.confLED7_off)
    def confLED7_off(self):
        ui = self.ui_nxtWin7
        ui.kled_poll7.setColor(Qt.Qt.darkBlue)

 ###################
 ###################
 ###################
 ###################
 ###################

    def makeCallCB(self,):
        """- compose query when needed. Do not make new query when it does not change """
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        self.apiReq = {} # to send the call with later
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            fillVal = ui.lineEdit1_nxtQ14_Val14.text()
            self.apiReq['secretPhrase'] = str(fillVal )
        for parmType in self.apiCall:
            if parmType =="secretPhrase": # specialtreatment for this one: always echoMode passphr
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            self.apiReq[str(fillKey.text())] = str(fillVal.text()) #  fillKey.setText(parmType)
        if ui.cb_scrollCheck.checkState() == 0:
            ui.textEdit_NRSRaw1.clear()
        self.emit( SIGNAL( "UC30_apiAcc(PyQt_PyObject)"), self.apiReq )    # send sig to UC

 ###########################
############################
############################
########## API Callbacks
    # currently 17 with passphrase (040614)

    def clearLines(self):
        # delete contents from last
        ui = self.ui_nxtWin7
        for lineEd in self.nxtQ_lineEdits:
            lineEd.clear()
        for lineEd in self.nxtQ_lineEdits_Vals:
            lineEd.clear()
        ui.lineEdit1_nxtQ9.clear()
        ui.lineEdit1_nxtQ9_Val9.clear()


    def broadcastTransactionCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.broadcastTransaction
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def buyAliasCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.buyAlias
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def calculateFullHashCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.calculateFullHash
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def cancelAskOrderCB(self,): #32
        self.clearLines()
        self.apiCall = self.apiCalls.cancelAskOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def cancelBidOrderCB(self,): #33
        self.clearLines()
        self.apiCall = self.apiCalls.cancelBidOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def castVoteCB(self,): #49
        self.clearLines()
        self.apiCall = self.apiCalls.castVote
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def createPollCB(self,): #50
        self.clearLines()
        self.apiCall = self.apiCalls.createPoll
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def decodeHallmarkCB(self,):#15
        self.clearLines()
        self.apiCall = self.apiCalls.decodeHallmark
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def decodeTokenCB(self,):#17
        self.clearLines()
        self.apiCall = self.apiCalls.decodeToken
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def decryptFromCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.decryptFrom
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def dgsDelistingCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsDelisting
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def dgsDeliveryCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsDelivery
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def dgsFeedbackCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsFeedback
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def dgsListingCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsListing
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def dgsPriceChangeCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsPriceChange
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def dgsPurchaseCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsPurchase
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def dgsQuantityChangeCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsQuantityChange
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def dgsRefundCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.dgsRefund
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def encryptToCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.encryptTo
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def generateTokenCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.generateToken
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAccountCB(self,): #2
        self.clearLines()
        self.apiCall = self.apiCalls.getAccount
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAccountBlockIdsCB(self,): #2
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountBlockIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAccountCurrentBidOrderIdsCB(self,):#40
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountCurrentBidOrderIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAccountCurrentAskOrderIdsCB(self,):#41
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountCurrentAskOrderIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAccountIdCB(self,): #1
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountId
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAccountPublicKeyCB(self,):#4
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountPublicKey
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAccountTransactionIdsCB(self,):#23
        self.clearLines()
        self.apiCall = self.apiCalls.getAccountTransactionIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAliasCB(self,):#51
        self.clearLines()
        self.apiCall = self.apiCalls.getAlias
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def  getAliasesCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getAliases
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getAllAssetsCB(self,):#60
        self.clearLines()
        self.apiCall = self.apiCalls.getAllAssets
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAllOpenOrdersCB(self,):#52
        self.clearLines()
        self.apiCall = self.apiCalls.getAllOpenOrders
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAllTradesCB(self,):#55
        self.clearLines()
        self.apiCall = self.apiCalls.getAllTrades
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAskOrderCB(self,):#27
        self.clearLines()
        self.apiCall = self.apiCalls.getAskOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAskOrderIdsCB(self,):#28
        self.clearLines()
        self.apiCall = self.apiCalls.getAskOrderIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getAskOrdersCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getAskOrders
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAssetCB(self,):#36
        self.clearLines()
        self.apiCall = self.apiCalls.getAsset
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getAssetIdsCB(self,):#37
        self.clearLines()
        self.apiCall = self.apiCalls.getAssetIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getAssetsCB(self,):#61
        self.clearLines()
        self.apiCall = self.apiCalls.getAssets
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def  getAssetsByIssuerCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getAssetsByIssuer
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getBalanceCB(self,):#3
        self.clearLines()
        self.apiCall = self.apiCalls.getBalance
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getBidOrderCB(self,):#30
        self.clearLines()
        self.apiCall = self.apiCalls.getBidOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getBidOrderIdsCB(self,):#31
        self.clearLines()
        self.apiCall = self.apiCalls.getBidOrderIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getBidOrdersCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getBidOrders
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getBlockCB(self,):#10
        self.clearLines()
        self.apiCall = self.apiCalls.getBlock
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getBlockIdCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getBlockId
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def  getBlockchainStatusCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getBlockchainStatus
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getConstantsCB(self,):#7
        self.clearLines()
        self.apiCall = self.apiCalls.getConstants
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getDGSGoodCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getDGSGood
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def  getDGSGoodsCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getDGSGoods
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def  getDGSPendingPurchasesCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getDGSPendingPurchases
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getDGSPurchaseCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getDGSPurchase
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def  getDGSPurchasesCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getDGSPurchases
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getForgingCB(self,): #54
        self.clearLines()
        self.apiCall = self.apiCalls.getForging
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getGuaranteedBalanceCB(self,):#5
        self.clearLines()
        self.apiCall = self.apiCalls.getGuaranteedBalance
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getMyInfoCB(self,):#8
        self.clearLines()
        self.apiCall = self.apiCalls.getMyInfo
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getNextBlockGeneratorsCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getNextBlockGenerators
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getPeerCB(self,):#11
        self.clearLines()
        self.apiCall = self.apiCalls.getPeer
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getPeersCB(self,):#12
        self.clearLines()
        self.apiCall = self.apiCalls.getPeers
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getPollCB(self,):#48
        self.clearLines()
        self.apiCall = self.apiCalls.getPoll
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getPollIdsCB(self,):#47
        self.clearLines()
        self.apiCall = self.apiCalls.getPollIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getStateCB(self,):#9
        self.clearLines()
        self.apiCall = self.apiCalls.getState
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getTimeCB(self,):#13
        self.clearLines()
        self.apiCall = self.apiCalls.getTime
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getTradesCB(self,):#43
        self.clearLines()
        self.apiCall = self.apiCalls.getTrades
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def getTransactionCB(self,):#26
        self.clearLines()
        self.apiCall = self.apiCalls.getTransaction
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def getTransactionBytesCB(self,):#42
        self.clearLines()
        self.apiCall = self.apiCalls.getTransactionBytes
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def getUnconfirmedTransactionIdsCB(self,):#25
        self.clearLines()
        self.apiCall = self.apiCalls.getUnconfirmedTransactionIds
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0
    #
    #



    def  getUnconfirmedTransactionsCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.getUnconfirmedTransactions
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def issueAssetCB(self,): #38
        self.clearLines()
        self.apiCall = self.apiCalls.issueAsset
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def leaseBalanceCB(self,): #56
        self.clearLines()
        self.apiCall = self.apiCalls.leaseBalance
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def markHostCB(self,): #14
        self.clearLines()
        self.apiCall = self.apiCalls.markHost
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def parseTransactionCB(self,):#50
        self.clearLines()
        self.apiCall = self.apiCalls.parseTransaction
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def placeAskOrderCB(self,): #34
        self.clearLines()
        self.apiCall = self.apiCalls.placeAskOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def placeBidOrderCB(self,): #35
        self.clearLines()
        self.apiCall = self.apiCalls.placeBidOrder
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


#

    def readEncryptedNoteCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.readEncryptedNote
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


#

    def  rsConvertCB(self,):#24
        self.clearLines()
        self.apiCall = self.apiCalls.rsConvert
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        for parmType in self.apiCall:
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


#

    def sellAliasCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.sellAlias
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


#

    def sendEncryptedNoteCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.sendEncryptedNote
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0






    def sendMessageCB(self,): #18
        self.clearLines()
        self.apiCall = self.apiCalls.sendMessage
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def sendMoneyCB(self,): #16
        self.clearLines()
        self.apiCall = self.apiCalls.sendMoney
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0




    def setAccountInfoCB(self,): #57
        self.clearLines()
        self.apiCall = self.apiCalls.setAccountInfo
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



#

    def setAliasCB(self,): #46
        self.clearLines()
        self.apiCall = self.apiCalls.setAlias
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def signTransactionCB(self,): #59
        self.clearLines()
        self.apiCall = self.apiCalls.signTransaction
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0

    def startForgingCB(self,): #44
        self.clearLines()
        self.apiCall = self.apiCalls.startForging
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0


    def stopForgingCB(self,): #45
        self.clearLines()
        self.apiCall = self.apiCalls.stopForging
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0



    def transferAssetCB(self,): #39
        self.clearLines()
        self.apiCall = self.apiCalls.transferAsset
        ui = self.ui_nxtWin7
        fillKeys = iter(self.nxtQ_lineEdits)
        fillVals = iter(self.nxtQ_lineEdits_Vals)
        if 'secretPhrase' in self.apiCall: # special treat for passphr
            ui.lineEdit1_nxtQ14.setText('secretPhrase')
            ui.lineEdit1_nxtQ14_Val14.setText(self.account.data['secretPhrase'])
        for parmType in self.apiCall:
            if parmType =="secretPhrase":
                continue
            fillKey = next(fillKeys)
            fillVal = next(fillVals)
            fillKey.setText(parmType)
            fillVal.setText(self.apiCall[parmType])
        return 0
############################
############################        
############################
########## Window Maintenance

    
    def show(self):
        self.uiFrame = QtGui.QMainWindow()
        self.ui_nxtWin7.setupUi(self.uiFrame)
        self.init() #self.ui_AlgoWin)
        self.uiFrame.show()     

    def close(self):
        pass
        
        


# How to include pyqtgraph in QtDesigner:
#For the serious application developer, all of the functionality in pyqtgraph is available via widgets that can be embedded just like any other Qt widgets. Most importantly, see: PlotWidget, ImageView, GraphicsLayoutWidget, and GraphicsView. Pyqtgraph’s widgets can be included in Designer’s ui files via the “Promote To...” functionality:
#
#    In Designer, create a QGraphicsView widget (“Graphics View” under the “Display Widgets” category).
#    Right-click on the QGraphicsView and select “Promote To...”.
#    Under “Promoted class name”, enter the class name you wish to use (“PlotWidget”, “GraphicsLayoutWidget”, etc).
#    Under “Header file”, enter “pyqtgraph”.
#    Click “Add”, then click “Promote”.
#
#See the designer documentation for more information on promoting widgets.
#http://www.pyqtgraph.org/documentation/how_to_use.html#embedding-widgets-inside-pyqt-applications    
        
   
      
      ###########################
      # widgets in this window   

# -*- coding: utf-8 -*-
"""
 Copyright (c) 2014 l8orre

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

#import sys


from PyQt4 import QtGui, Qt, QtCore
from PyQt4.QtCore import  SIGNAL , QObject, pyqtSignal, pyqtSlot

from PyQt4.Qt import QAbstractItemView

from os import listdir as ls
#from PyQt4.Qt import QPixmap
import os
import time
#import scipy as sp
#import pyqtgraph as pg <- this can be tricky! if there is no reference, it makes qt crash!

import nxtPwt  
#import FR.nxtApiPrototypes as nxtApiPrototypes
from nxtPwt.nxtApiPrototypes import nxtQs



class nxtWin2Control(QObject):
    """ class nxtWin2Control(): here
   Assets View


textEdit_test
pb_1
pb_2
pb_3
pb_4
pb_5
pb_clear


pb_getAllAssets

tv_accAssets
tv_allAssets

gb_AccResid
lineEdit_acctResid
lcdN_acctRes_Nxt
lcdN_acctRes_Nqt
lcdN_acctResU_Nxt
lcdN_acctResU_Nqt

gb_AccSLT
lineEdit_acctSlated
pb_addAcc
lcdN_acctSLT_Nxt
lcdN_acctSLT_Nqt
lcdN_acctSLTU_Nxt
lcdN_acctSLTU_Nqt


groupBox_assetList
lineEdit_assetSLT
pb_assToOB


groupBox_acctList
listWidget_acctList

groupBox_assetList
listWidget_assetList






""" 


    
    def __init__(self, app): #, application
        super(QObject, self, ).__init__()
        import nxtPwt.ui_nxtWin2 as nxtWin2  # the QtCreator-generated Widget.py!!
        ui = nxtWin2.Ui_MainWindow() # Ui_MainWindow() is the autogenerated class in m2def.py
        self.ui_nxtWin2 = ui 
        self.app = app  #
          
        # Local Timer. get more of needed.
        self.pollTimer1 = QtCore.QTimer() #  local TIMER
        self.pollTime1 = 10000
         
        self.app.nxtWin2 = self # make this   WinControl1  known  in the app namespace.  When this Win throws sigs, they can be recvd anywhere where this isknown.
        self.accountResid = app.sessMan.uc2_accHndlr.accRes   # just to have the name shortewr
        self.sessMan = app.sessMan

        self.uc5_AE = self.sessMan.uc5_AE
        self.uc2_AH = self.sessMan.uc2_accHndlr

        
    def init(self): #,  init the control widgets on this window. can't be done in the __init__().
        """ the AssetExchange WIndow """ 
        
        ui = self.ui_nxtWin2

        # incoming signals from elsewhere
        #QObject.connect(self.uc5_AE, SIGNAL("uc5_getAllAssets_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc5_getAllAssets_CB)

        # local widget singals
        QtCore.QObject.connect(ui.pb_getAllAssets , SIGNAL("clicked()"), self.getAllAssets_Clk )
        QtCore.QObject.connect(ui.pb_assToOB , SIGNAL("clicked()"), self.assetToOb_Clk )
        QtCore.QObject.connect(ui.gb_AccResid , SIGNAL("clicked()"), self.gb_AccResid_Clk )
        QtCore.QObject.connect(ui.gb_AccSLT , SIGNAL("clicked()"), self.gb_AccSLT_Clk  )
        #QtCore.QObject.connect(ui.tv_allAssets, SIGNAL("doubleClicked(QModelIndex)"), self.tv_allAssets_Clk)
        #QtCore.QObject.connect(ui.tv_accAssets, SIGNAL("doubleClicked(QModelIndex)"), self.tv_accAssets_Clk)
        QtCore.QObject.connect(ui.tv_allAssets, SIGNAL("clicked(QModelIndex)"), self.tv_allAssets_Clk)
        QtCore.QObject.connect(ui.tv_accAssets, SIGNAL("clicked(QModelIndex)"), self.tv_accAssets_Clk)
        QtCore.QObject.connect(ui.lv_assets1, SIGNAL("clicked(QModelIndex)"), self.lv_assets1_Clk)
        QtCore.QObject.connect(ui.lv_accounts1, SIGNAL("clicked(QModelIndex)"), self.lv_accounts1_Clk)

        QObject.connect(self.uc5_AE, SIGNAL("uc5_getAccountResid_Sig(PyQt_PyObject, PyQt_PyObject)"), self.getAccountRSD_CB)
        QObject.connect(self.uc5_AE, SIGNAL("uc5_getAccountSlated_Sig(PyQt_PyObject, PyQt_PyObject)"), self.getAccountSLT_CB)

        ui.lineEdit_pollTimer2.setText( str(self.pollTime1 ))

        QtCore.QObject.connect(self.pollTimer1, QtCore.SIGNAL("timeout()"), self.nxtPoll1CB) # LOCALTIMER
        QtCore.QObject.connect(ui.gb_poll2 , SIGNAL("clicked()"), self.togglePoll2_CB )
        ui.gb_poll2.setChecked(False)
        self.blinkerCols = [Qt.Qt.darkYellow, Qt.Qt.magenta]
        ui.kled_poll2.setColor(Qt.Qt.darkBlue)

        ui.lineEdit_acctResid.setText(self.accountResid.data['account'])
        ui.lcdN_acctRes_Nxt.setDigitCount(9)        #
        ui.lcdN_acctRes_Nxt.setSegmentStyle(2)

        ui.lcdN_acctRes_Nqt.setDigitCount(8)        #
        ui.lcdN_acctRes_Nqt.setSegmentStyle(2)

        ui.lcdN_acctResU_Nxt.setDigitCount(9)        #
        ui.lcdN_acctResU_Nxt.setSegmentStyle(2)

        ui.lcdN_acctResU_Nqt.setDigitCount(8)        #
        ui.lcdN_acctResU_Nqt.setSegmentStyle(2)


        self.init_Views()


        
    def init_Views(self):
        ui = self.ui_nxtWin2

        ui.tv_allAssets.setAlternatingRowColors(True)
        ui.tv_allAssets.setSortingEnabled(True)
        ui.tv_allAssets.setModel(self.uc5_AE.uc5_allAssets_proxy)
        ui.tv_allAssets.setSelectionBehavior(0)
        ui.tv_allAssets.setSelectionMode(1)
        ui.tv_allAssets.horizontalHeader().setStretchLastSection(True)

        ui.tv_accAssets.setModel(self.uc5_AE.uc5_accAssets_proxy)
        ui.tv_accAssets.horizontalHeader().setStretchLastSection(True)

        ui.tv_accAssets.emit(SIGNAL( "clicked(0,0)"), int,int)

        ui.tv_accAssets.setAlternatingRowColors(True)
        ui.tv_accAssets.setSortingEnabled(True)
        ui.tv_accAssets.setSelectionBehavior(0)
        ui.tv_accAssets.setSelectionMode(1)


        ui.lv_assets1.setAlternatingRowColors(True)
        ui.lv_assets1.setModel(self.uc5_AE.uc5_assetShortList)

        ui.lv_accounts1.setAlternatingRowColors(True)
        ui.lv_accounts1.setModel(self.uc5_AE.uc5_acctShortList)

        ui.gb_AccSLT.setChecked(False)
        self.getAllAssets_Clk() # fetch all assets on open
        self.gb_AccResid_Clk() #getAccRSD_Clk() # fetch all assets on open

        #ui.tv_allAssets.horizontalHeader.setClickable(True)    assetColHeaders


    def assetToOb_Clk(self):
        ui = self.ui_nxtWin2
        assetFocus=ui.lineEdit_assetSLT.text()
        call={'assetFocus':self.selectAsset}
        meta={'caller':'uc_slateAsset'}
        self.uc5_AE.emit( SIGNAL( "uc5_focusAsset_Sig(PyQt_PyObject, PyQt_PyObject)"), call, meta)


    def lv_accounts1_Clk(self, position):
        ui = self.ui_nxtWin2
        slateAccount = (self.uc5_AE.uc5_acctShortList.listData[position.row()])
        ui.lineEdit_acctSlated.setText(slateAccount)
        self.sessMan.uc2_accHndlr.accSLT = slateAccount
        self.sessMan.uc2_accHndlr.accFOC = self.sessMan.uc2_accHndlr.accSLT

        self.uc5_AE.getAccount(slateAccount, 'accSLT')

    def lv_assets1_Clk(self, position):
        ui = self.ui_nxtWin2
        slateAsset = (self.uc5_AE.uc5_assetShortList.listData[position.row()])
        ui.lineEdit_assetSLT.setText(slateAsset)


    def tv_allAssets_Clk(self, qmodelIndex): # row, col):
        ui = self.ui_nxtWin2
        so = self.uc5_AE.uc5_allAssets_proxy.mapToSource(qmodelIndex)
        selcolumn = qmodelIndex.column() #          self.sessMan.uc5_AE.assets.tableData[qmodelIndex.column()]
        self.selectAsset = self.uc5_AE.assets.allAssetsQtM.tableData[so.row()]

        slateAccount =str(self.selectAsset[5])
        slateAsset = str(self.selectAsset[0])

        self.sessMan.uc2_accHndlr.accSLT = slateAccount
        ui.tv_allAssets.resizeColumnsToContents()
        ui.lineEdit_acctSlated.setText(slateAccount)

        ui.lineEdit_assetSLT.setText(slateAsset)

        self.uc5_AE.uc5_assetShortList.enterItem(0, slateAsset)
        self.uc5_AE.uc5_acctShortList.enterItem(0, slateAccount)

        self.uc5_AE.getAccount(slateAccount, 'accSLT')

        ui.textEdit_assetDesc.clear()
        ui.textEdit_assetDesc.append( str(self.selectAsset[6])  )


    def tv_accAssets_Clk(self, qmodelIndex): # row, col):
        ui = self.ui_nxtWin2
        so = self.uc5_AE.uc5_accAssets_proxy.mapToSource(qmodelIndex)
        selcolumn = qmodelIndex.column() #          self.sessMan.uc5_AE.assets.tableData[qmodelIndex.column()]
        self.selectAsset = self.uc5_AE.assets.accAssetsQtM.tableData[so.row()]
        #slateAcct = str(self.selectAsset[5])
        slateAsset = str(self.selectAsset[0])
        ui.tv_accAssets.resizeColumnsToContents()
        ui.lineEdit_acctSlated.setText(slateAsset)
        ui.lineEdit_assetSLT.setText(slateAsset)

        self.uc5_AE.uc5_assetShortList.enterItem(0, slateAsset)


    def getAccountRSD_CB(self, reply, meta):
        ui = self.ui_nxtWin2
        Nqt=self.accountResid.balance.Nqt
        Nxt=self.accountResid.balance.Nxt
        NqtU=self.accountResid.balanceU.Nqt
        NxtU=self.accountResid.balanceU.Nxt
        ui.lcdN_acctRes_Nxt.display(Nxt)       #
        ui.lcdN_acctRes_Nqt.display(Nqt)       #
        ui.lcdN_acctResU_Nxt.display(NxtU)   #
        ui.lcdN_acctResU_Nqt.display(NqtU)
        ui.lineEdit_acctResid.setText(self.accountResid.data['account'])
        #print(str(reply))


    def getAccountSLT_CB(self, reply, meta):
        ui = self.ui_nxtWin2
        NqtS  = str(reply['balanceNQT'])
        NqtUS = str(reply['unconfirmedBalanceNQT'])
        digs = len(NqtS)
        idigs = 17 - digs
        NqtS = idigs * '0' + NqtS
        Nqt = NqtS[-8:]
        Nxt  =  NqtS[:9]
        Nxt = Nxt.lstrip('0')
        digs = len(NqtUS)
        idigs = 17 - digs
        NqtUS = idigs * '0' + NqtUS
        NqtU = NqtUS[-8:]
        NxtU  =  NqtUS[:9]
        NxtU = NxtU.lstrip('0')
        ui.lcdN_acctSLT_Nxt.display(Nxt)
        ui.lcdN_acctSLT_Nqt.display(Nqt)
        ui.lcdN_acctSLTU_Nxt.display(NxtU)
        ui.lcdN_acctSLTU_Nqt.display(NqtU)


    def getAllAssets_Clk(self):
        ui = self.ui_nxtWin2
        self.sessMan.uc5_AE.getAllAssets()



    def gb_AccSLT_Clk(self):
        ui = self.ui_nxtWin2
        ui.gb_AccResid.setChecked(False)
        self.sessMan.uc2_accHndlr.accFOC = self.sessMan.uc2_accHndlr.accSLT.data['account']
        self.uc5_AE.getAccount(self.sessMan.uc2_accHndlr.accSLT, 'accSLT')
        #print("GETSLT ACCT: " + self.sessMan.uc2_accHndlr.accSLT)


    def gb_AccResid_Clk(self):#def getAccRSD_Clk(self):
        ui = self.ui_nxtWin2
        ui.gb_AccSLT.setChecked(False)
        self.sessMan.uc2_accHndlr.accFOC = self.sessMan.uc2_accHndlr.accRes.data['account']
        self.sessMan.uc5_AE.getAccount(self.accountResid.data['account'], 'accRes')


    #
    # def gb_AccSLT_Clk(self):
    #     ui = self.ui_nxtWin2
    #     ui.gb_AccResid.setChecked(False)
    #
    # def gb_AccResid_Clk(self):
    #     ui = self.ui_nxtWin2
    #     ui.gb_AccSLT.setChecked(False)



      ###########
      ###########
      ###########
      ###########

    def togglePoll2_CB(self):
        ui = self.ui_nxtWin2
        if not ui.gb_poll2.isChecked():
            print("OFF")
            self.pollTimer1.stop()
            #ui.textEdit_NRSRaw1.append( " stop polling...")
            return 0
        elif ui.gb_poll2.isChecked():
            print("ON")
            self.pollTimer1.start(int ( self.pollTime1 ) )
            return 0

    def nxtPoll1CB(self):
        ui =  self.ui_nxtWin2
        ui.kled_poll2.setColor(self.blinkerCols[0]) # activity indicator
        self.blinkerCols.reverse()
        self.getAccRSD_Clk()

    def setPollTimer1CB(self,):
        ui = self.ui_nxtWin2
        self.pollTime1 = ui.lineEdit_pollTimer2.text()
        self.togglePoll2_CB()
        return 0



###############################



      ###########
      ###########
      ###########
      ###########
    # blinkers      
      
      
    def confLED2_OK(self):
        ui = self.ui_nxtWin2
        ui.kled_conf2.setColor(Qt.Qt.green)
        self.localTimer2.singleShot(1000,self.confLED2_off)

    def confLED2_cy(self):
        ui = self.ui_nxtWin2
        ui.kled_conf2.setColor(Qt.Qt.cyan)
        self.localTimer2.singleShot(500,self.confLED2_off)
     
    def confLED2_ma(self):
        ui = self.ui_nxtWin2
        ui.kled_conf2.setColor(Qt.Qt.magenta)
        self.localTimer2.singleShot(500,self.confLED2_off)
    
    def confLED2_notOK(self):
        ui = self.ui_nxtWin2
        ui.kled_conf2.setColor(Qt.Qt.red)
        self.localTimer2.singleShot(1000,self.confLED2_off)
    
    def confLED2_off(self):
        ui = self.ui_nxtWin2
        ui.kled_conf2.setColor(Qt.Qt.darkBlue)
        
           
      # obs


    def pb_1_CB(self):
        ui = self.ui_nxtWin2
        ui.textEdit_test.clear()

    def pb_clear_CB(self):
        ui = self.ui_nxtWin2
        ui.textEdit_test.clear()


      
      
############################
############################        
############################
########## Window Maintenance

    def close(self):
        pass # make proper close here upon click
    
    def show(self):
        self.uiFrame = QtGui.QMainWindow()
        self.ui_nxtWin2.setupUi(self.uiFrame)
        self.init()  
        self.uiFrame.show()     
        return 0

        

# -*- coding: utf-8 -*-
"""
 Copyright (c) 2014 l8orre

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

#import sys


from PyQt4 import QtGui, Qt, QtCore
from PyQt4.QtCore import  SIGNAL , QObject, pyqtSignal, pyqtSlot
from PyQt4.QtCore import  QObject
#import numpy as np
from os import listdir as ls
from PyQt4.Qt import QPixmap
import os
import time




class nxtWin3Control(QObject):
    """ class nxtWin1Control(): here""" 
    
    
    UCTEST_activate = pyqtSignal(int) # (object)
    
        
    def __init__(self, app): #, application
        super(QObject, self, ).__init__()
        import  FR.ui_nxtWin3 as nxtWin3  # the QtCreator-generated Widget.py!!
        ui = nxtWin3.Ui_MainWindow() # Ui_MainWindow() is the autogenerated class in m2def.py
        self.ui_nxtWin3 = ui 
        self.app = app  # print self.app
        self.app.nxtWin3 = self # make this  AlgoWinControl1  known to the Algo!!!
        self.pollTimer3 = QtCore.QTimer() #  local TIMER
        self.pollTime3 = 15000


        self.timerStrobe3 = QtCore.QTimer() #  local TIMER
        self.timeStrobe3 = 2000

        self.sessMan = app.sessMan


        self.uc2_AH = self.sessMan.uc2_accHndlr
        self.uc5_AE = self.sessMan.uc5_AE
        self.uc6_AO = self.sessMan.uc6_AO
        self.uc7_ATX = self.sessMan.uc7_ATX
        self.uc8_Trades = self.sessMan.uc8_Trades


        self.accountResid = self.uc2_AH.accRes   # just to have the name shortewr
        self.accountSLT = self.uc2_AH.accSLT
        self.accountOIss = self.uc2_AH.accOIss



        
    def init(self): #, ui_AlgoWin):
        ui = self.ui_nxtWin3


        QObject.connect(self.sessMan, SIGNAL("TX_placeBidOrder_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_placeBid_CB )
        QObject.connect(self.sessMan, SIGNAL("TX_cancelBidOrder_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_cancelBid_CB )
        QObject.connect(self.sessMan, SIGNAL("TX_placeAskOrder_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_placeAsk_CB )
        QObject.connect(self.sessMan, SIGNAL("TX_cancelAskOrder_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_cancelAsk_CB )
        QObject.connect(self.sessMan, SIGNAL("TX_issueAsset_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_issueAsset_CB )
        QObject.connect(self.sessMan, SIGNAL("TX_transferAsset_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc7_TX_transferAsset_CB )


        QObject.connect(self.uc5_AE, SIGNAL("uc5_focusAsset_Sig(PyQt_PyObject, PyQt_PyObject)"), self.uc5_focusAsset_CB)

        QtCore.QObject.connect(ui.tv_allAssAskOrders, SIGNAL("doubleClicked(QModelIndex)"), self.tv_askOrders_Clk)
        QtCore.QObject.connect(ui.tv_allAssBidOrders, SIGNAL("doubleClicked(QModelIndex)"), self.tv_bidOrders_Clk)

        QtCore.QObject.connect(ui.pb_issueAsset , SIGNAL("clicked()"), self.uc7_issueAsset_Clk)
        QtCore.QObject.connect(ui.pb_matchOrder , SIGNAL("clicked()"), self.matchOrder_Clk)
        QtCore.QObject.connect(ui.pb_cancelOrder , SIGNAL("clicked()"), self.uc7_cancelOrder_Clk)
        QtCore.QObject.connect(ui.pb_placeBid , SIGNAL("clicked()"), self.uc7_placeBid_Clk)
        QtCore.QObject.connect(ui.pb_placeAsk , SIGNAL("clicked()"), self.uc7_placeAsk_Clk)
        QtCore.QObject.connect(ui.pb_XferAsset , SIGNAL("clicked()"), self.uc7_XferAsset_Clk)



        QtCore.QObject.connect(ui.lineEdit_pollTimer3, SIGNAL("returnPressed()"), self.setPollTimer3_Clk)
        QtCore.QObject.connect(self.pollTimer3, QtCore.SIGNAL("timeout()"), self.nxtPoll3CB) # LOCALTIMER
        QtCore.QObject.connect(ui.gb_poll3 , SIGNAL("clicked()"), self.togglePoll3_CB )
        QObject.connect(self.timerStrobe3, SIGNAL("timeout()"),  self.confLED3_strobe4)


        self.blinkerCols = [Qt.Qt.darkYellow, Qt.Qt.magenta]
        self.strobeCols = [Qt.Qt.cyan, Qt.Qt.green]

        ui.kled_poll3.setColor(Qt.Qt.darkBlue)
        ui.kled_conf3.setColor(Qt.Qt.darkBlue)
        ui.lineEdit_pollTimer3.setText( str(self.pollTime3 ))

        ui.gb_poll3.setChecked(False)
        self.blinkerCols = [Qt.Qt.darkYellow, Qt.Qt.magenta]

        ui.lineEdit_feeNqt.setText('00000000')
        ui.lineEdit_feeNxt.setText('1')
        ui.lineEdit_expire.setText('180')

        QtCore.QObject.connect(ui.cb_oIss , SIGNAL("clicked()"), self.cb_oIss_Clk) # TEST



        # this doesnt work yet
        QObject.connect(self.uc5_AE.orders.ordersAsk_QtM, SIGNAL("endInsertRows()"), self.autoScrollCB )


        self.init_Views()


        """

tv_trades1

lineEdit_assetID     x
lineEdit_assetName   x
lineEdit_assetQTY    x
lineEdit_assetDesc   x
lineEdit_assetIssuer x

lineEdit_recipient
lineEdit_XferComment

lineEdit_serverReply1
lineEdit_serverReply2


lineEdit_feeNqt   x
lineEdit_feeNxt   x

lineEdit_dec      x
lineEdit_numTrd

lineEdit_orderIss
lineEdit_orderId

lineEdit_price    x
lineEdit_Vol      x

lineEdit_price2    x
lineEdit_Vol2      x
lineEdit_expire    x


     pb_AssetIssuer connect back to Win2 slate acct

~~~~~~~~~~~~
#connect exists:


    tv_allAssAskOrders
    tv_allAssBidOrders


    pb_matchOrder
    pb_cancelOrder
    pb_placeBid
    pb_placeAsk
    pb_issueAsset
    pb_XferAsset


    lineEdit_pollTimer3


    gb_poll3



~~~~~~~~~~~~
# will not be connected:

    pb_AssetID
    pb_AssetName
    pb_AssetQTY
    pb_AssetDesc


    gb_tradeFilters

    kled_conf3
    kled_poll3




    cb_cancelOrder   x
    cb_bidOrder      x
    cb_bidOrder2     x
    cb_askOrder      x
    cb_askOrder2     x
    cb_issueAsset    x
    cb_Xfer          x
    cb_oIss


lineEdit_trdVol
lineEdit_numTrd

lineEdit_tradesStop
lineEdit_tradesStart
gb_timeInterval


    """


    def init_Views(self):
        ui = self.ui_nxtWin3

        ui.lineEdit_price.setText('0')

        ui.tv_allAssAskOrders.setModel(self.uc6_AO.uc6_askO_single_proxy)
        ui.tv_allAssBidOrders.setModel(self.uc6_AO.uc6_bidO_single_proxy)

        ui.tv_allAssBidOrders.setSelectionBehavior(Qt.QAbstractItemView.SelectRows)
        ui.tv_allAssAskOrders.setSelectionBehavior(Qt.QAbstractItemView.SelectRows)

        ui.tv_trades1.setModel(self.uc8_Trades.uc8_allTrades_proxy)


        ui.tv_trades1.horizontalHeader().setStretchLastSection(True)

        ui.tv_allAssBidOrders.horizontalHeader().setStretchLastSection(True)
        ui.tv_allAssAskOrders.horizontalHeader().setStretchLastSection(True)


        #ui.tv_trades1.resizeColumnsToContents()

            # bgAsk = Qt.QPalette()
            # bgAsk.ColorRole(10) #
            # bgAsk.setColor(0,10,Qt.QColor(240,10,0,110))
        #print(str(ui.tv_allAssAskOrders.resizeColumnsToContents()))

        #ui.tv_allAssAskOrders.resizeColumnsToContents()

        colW = 150
        ui.tv_allAssAskOrders.columnWidth(colW)
        ui.tv_trades1.columnWidth(colW)
        ui.tv_allAssBidOrders.columnWidth(colW)

            # ui.tv_allAssBidOrders.setBackgroundRole(bgAsk.ColorRole())
            # #ui.tv_allAssAskOrders.setBackgroundRole(Qt. QColor(10,240,0,110))


    def autoScrollCB(self):
        ui = self.ui_nxtWin3
        print("LLLLLL")
        QtCore.QTimer.singleSHot(0, ui.tv_allAssAskOrders.scrollToBottom) # workaround

    def matchOrder_Clk(self, ):
        ui = self.ui_nxtWin3
        ui.lineEdit_price.setText(ui.lineEdit_price2.text())
        ui.lineEdit_Vol.setText(ui.lineEdit_Vol2.text())


    # ToDo: set tv_accAssets RIGHT!!!! adat model!


    def uc5_focusAsset_CB(self, call, meta):
        ui = self.ui_nxtWin3
        print("uc5_focusAsset_CB " + str(call) + str(meta))
        self.selAsset = call['assetFocus']
        self.selAssetId = self.selAsset[0]
        self.selAssetName = self.selAsset[1]
        self.selAssetQty = self.selAsset[2]
        self.selAssetDesc = self.selAsset[6]
        self.selAssetIss = self.selAsset[5]
        self.selAssetDec = self.selAsset[4]
        self.selAssetTrd = self.selAsset[3] # check
        ui.lineEdit_assetID.setText(str(self.selAssetId))
        ui.lineEdit_assetName.setText(str(self.selAssetName))
        ui.lineEdit_assetQTY.setText(str(self.selAssetQty))
        ui.lineEdit_assetDesc.setText(str(self.selAssetDesc))
        ui.lineEdit_assetIssuer.setText(str(self.selAssetIss))
        ui.lineEdit_dec.setText(str(self.selAssetDec))
        ui.lineEdit_numTrd.setText(str(self.selAssetTrd))
        self.nxtPoll3CB()



    def tv_askOrders_Clk(self, qmodelIndex): # row, col):
        ui = self.ui_nxtWin3
        so = self.uc6_AO.uc6_askO_single_proxy.mapToSource(qmodelIndex)
        selcolumn = qmodelIndex.column() #          self.sessMan.uc5_AE.assets.tableData[qmodelIndex.column()]
        self.selectOrder = self.uc6_AO.orders.ordersAsk_QtM.tableData[so.row()]
        ui.lineEdit_price2.setText(str(self.selectOrder[0]))
        ui.lineEdit_Vol2.setText(str(self.selectOrder[1]))
        ui.lineEdit_orderIss.setText(str(self.selectOrder[2]))
        ui.lineEdit_orderId.setText(str(self.selectOrder[4]))

        ui.cb_bidOrder2.setCheckState(False )
        ui.cb_askOrder2.setCheckState(True)


    def tv_bidOrders_Clk(self, qmodelIndex): # row, col):
        ui = self.ui_nxtWin3
        so = self.uc6_AO.uc6_bidO_single_proxy.mapToSource(qmodelIndex)
        selcolumn = qmodelIndex.column() #          self.sessMan.uc5_AE.assets.tableData[qmodelIndex.column()]
        self.selectOrder = self.uc6_AO.orders.ordersBid_QtM.tableData[so.row()]
        ui.lineEdit_price2.setText(str(self.selectOrder[0]))
        ui.lineEdit_Vol2.setText(str(self.selectOrder[1]))
        ui.lineEdit_orderIss.setText(str(self.selectOrder[2]))
        ui.lineEdit_orderId.setText(str(self.selectOrder[4]))

        ui.cb_bidOrder2.setCheckState(True)
        ui.cb_askOrder2.setCheckState(False)



    def uc7_issueAsset_Clk(self, ):
        ui = self.ui_nxtWin3
        TXparms={}
        # 1 TXparms check for validity
        # 2 compose TXparmsS

        assetName = ui.lineEdit_assetName.text()
        # and lots of other custom checks possible too
        if len(assetName) > 10:
            self.confLED3_notOK()
        else:
            TXparms['name'] = assetName
        #
        assetDesc = ui.lineEdit_assetDesc.text()
        if len(assetDesc) > 1000:
            self.confLED3_notOK()
        else:
            TXparms['description'] = assetDesc
        #
        qty = ui.lineEdit_assetQTY.text()
        if len(qty) > 17:
            self.confLED3_notOK()
        else:
            TXparms['quantityQNT'] = qty

        dec = ui.lineEdit_dec.text()
        if len(dec) > 1:
            self.confLED3_notOK()
        else:
            TXparms['decimals'] = dec

        feeNQT =ui.lineEdit_feeNqt.text()
        feeNQT = (8 - len(feeNQT)) * '0' + feeNQT # zero padding!
        feeNXT = ui.lineEdit_feeNxt.text()
        feeTOT = feeNXT + feeNQT

        TXparms['feeNQT'] = feeTOT
        TXparms['deadline'] = ui.lineEdit_expire.text()


            # 3 create TX on sessMan.ucX
        if ui.cb_issueAsset.isChecked():
            self.confLED3_cy()
            ui.cb_Xfer.setCheckState(False)
            # 3 create TX on sessMan.ucX
            self.sessMan.uc7_ATX.issueAsset(TXparms)
        else:
            self.confLED3_notOK()

    def uc7_cancelOrder_Clk(self, ):
        ui = self.ui_nxtWin3
        self.confLED3_ma()


        TXparms={}
        # 1 TXparms check for validity
        # 2 compose TXparmsS
        # and lots of other custom checks possible too

        orderToCancel  = ui.lineEdit_orderId.text()
        print(orderToCancel)
        if len(orderToCancel) > 66:
            self.confLED3_notOK()
        else:
            TXparms['order'] = orderToCancel


        feeNQT =ui.lineEdit_feeNqt.text()
        feeNQT = (8 - len(feeNQT)) * '0' + feeNQT # zero padding!
        feeNXT = ui.lineEdit_feeNxt.text()
        feeTOT = feeNXT + feeNQT

        TXparms['feeNQT'] = feeTOT
        TXparms['deadline'] = ui.lineEdit_expire.text()

        # 3 create TX on sessMan.ucX

        if ui.cb_cancelOrder.isChecked():
            if (ui.cb_bidOrder.isChecked() and not ui.cb_askOrder.isChecked()) :
                self.confLED3_cy()
                print("CANCEL BID")
                ui.cb_bidOrder.setCheckState(False)
                ui.cb_askOrder.setCheckState(False)
                ui.cb_cancelOrder.setCheckState(False)
                self.confLED3_ma()

                self.sessMan.uc7_ATX.cancelBidOrder(TXparms)
            elif (ui.cb_askOrder.isChecked() and not ui.cb_bidOrder.isChecked()) :
                ui.cb_bidOrder.setCheckState(False)
                ui.cb_askOrder.setCheckState(False)
                print("CANCEL ASK")
                ui.cb_cancelOrder.setCheckState(False)
                self.confLED3_cy()

                self.sessMan.uc7_ATX.cancelAskOrder(TXparms)
        else:
            ui.cb_bidOrder.setCheckState(False)
            ui.cb_askOrder.setCheckState(False)
            ui.cb_cancelOrder.setCheckState(False)

            self.confLED3_notOK()

    def uc7_placeBid_Clk(self, ):
        ui = self.ui_nxtWin3

        TXparms={}
        # 1 TXparms check for validity
        # 2 compose TXparmsS
        # and lots of other custom checks possible too

        bidOrderVol = ui.lineEdit_Vol.text()
        if len(bidOrderVol) > 17:
            self.confLED3_notOK()
        else:
            TXparms['quantityQNT'] = bidOrderVol

        assetToBuy = ui.lineEdit_assetID.text()
        if len(assetToBuy) == 0:
            self.confLED3_notOK()
        else:
            TXparms['asset'] =  assetToBuy

        price = ui.lineEdit_price.text()
        if len(price) == 0:
            self.confLED3_notOK()
        else:
            TXparms['priceNQT'] = price

        feeNQT =ui.lineEdit_feeNqt.text()
        feeNQT = (8 - len(feeNQT)) * '0' + feeNQT # zero padding!
        feeNXT = ui.lineEdit_feeNxt.text()
        feeTOT = feeNXT + feeNQT

        TXparms['feeNQT'] = feeTOT
        TXparms['deadline'] = ui.lineEdit_expire.text()

        # 3 create TX on sessMan.ucX
        if (ui.cb_bidOrder.isChecked() and not ui.cb_askOrder.isChecked()) :
            self.confLED3_cy()
            ui.cb_bidOrder.setCheckState(False)
            self.sessMan.uc7_ATX.placeBidOrder(TXparms)
        else:
            self.confLED3_notOK()


#######

    def uc7_placeAsk_Clk(self, ):
        ui = self.ui_nxtWin3

        TXparms={}
        # 1 TXparms check for validity
        # 2 compose TXparmsS
        # and lots of other custom checks possible too

        askOrderVol = ui.lineEdit_Vol.text()
        if len(askOrderVol) > 17:
            self.confLED3_notOK()
        else:
            TXparms['quantityQNT'] = askOrderVol

        assetToSell = ui.lineEdit_assetID.text()
        if len(assetToSell) == 0:
            self.confLED3_notOK()
        else:
            TXparms['asset'] =  assetToSell

        price = ui.lineEdit_price.text()
        if len(price) == 0:
            self.confLED3_notOK()
        else:
            TXparms['priceNQT'] = price

        feeNQT =ui.lineEdit_feeNqt.text()
        feeNQT = (8 - len(feeNQT)) * '0' + feeNQT # zero padding!
        feeNXT = ui.lineEdit_feeNxt.text()
        feeTOT = feeNXT + feeNQT

        TXparms['feeNQT'] = feeTOT
        TXparms['deadline'] = ui.lineEdit_expire.text()

        # 3 create TX on sessMan.ucX
        if (ui.cb_askOrder.isChecked() and not ui.cb_bidOrder.isChecked()) :
            self.confLED3_cy()
            ui.cb_askOrder.setCheckState(False)
            self.sessMan.uc7_ATX.placeAskOrder(TXparms)
        else:
            self.confLED3_notOK()

    def uc7_XferAsset_Clk(self, ):
        ui = self.ui_nxtWin3

        TXparms={}
        # 1 TXparms check for validity
        # 2 compose TXparmsS
        # and lots of other custom checks possible too

        qty = ui.lineEdit_assetQTY.text()
        if len(qty) > 17:
            self.confLED3_notOK()
        else:
            TXparms['quantityQNT'] = qty
        comment = ui.lineEdit_XferComment.text()
        if len(comment) == 0:
            self.confLED3_notOK()
        else:
            TXparms['comment'] = comment
        assetToTransfer = ui.lineEdit_assetID.text()
        if len(assetToTransfer) == 0:
            self.confLED3_notOK()
        else:
            TXparms['asset'] =  assetToTransfer
        recipient = ui.lineEdit_recipient.text()
        if len(recipient) == 0:
            self.confLED3_notOK()
        else:
            TXparms['recipient'] = recipient

        feeNQT =ui.lineEdit_feeNqt.text()
        feeNQT = (8 - len(feeNQT)) * '0' + feeNQT # zero padding!
        feeNXT = ui.lineEdit_feeNxt.text()
        feeTOT = feeNXT + feeNQT

        TXparms['feeNQT'] = feeTOT
        TXparms['deadline'] = ui.lineEdit_expire.text()

        # 3 create TX on sessMan.ucX
        if ui.cb_Xfer.isChecked():
            self.confLED3_cy()
            self.sessMan.uc7_ATX.transferAsset(TXparms)
        else:
            self.confLED3_notOK()


    def uc7_TX_transferAsset_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()

    # RECEIVE REPLY
    def uc7_TX_issueAsset_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()

    # RECEIVE REPLY
    def uc7_TX_placeAsk_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()

    # RECEIVE REPLY
    def uc7_TX_placeBid_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()

#################

    # RECEIVE REPLY
    def uc7_TX_cancelBid_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()

    def uc7_TX_cancelAsk_CB(self, TX, meta):
        ui = self.ui_nxtWin3
        # PARSE REPLY:
        #for key in TX.crypt1:
        #    ui.textEdit_newTXs.append("sendMoney " + key + " -" + str(TX.crypt1[key]) +"\n" )
        #ui.textEdit_newTXs.append(  str(time.asctime() + "\n###############\n"))
        try:
            TX_ID = TX.crypt1['transaction']
            ui.lineEdit_serverReply1.setText(TX_ID )
            self.confLED3_OK()
        except:
            ui.lineEdit_serverReply1.setText( 'Error - ')
            ui.lineEdit_serverReply2.setText( TX.crypt1['errorDescription'] + str(TX.crypt1['errorCode']))
            self.confLED3_notOK()









    def togglePoll3_CB(self):
        ui = self.ui_nxtWin3
        if not ui.gb_poll3.isChecked():
            #print("OFF")
            self.pollTimer3.stop()
            #ui.textEdit_NRSRaw1.append( " stop polling...")
            return 0
        elif ui.gb_poll3.isChecked():
            #print("ON")
            self.pollTimer3.start(int( self.pollTime3 ) )
            self.nxtPoll3CB()
            #ui.textEdit_NRSRaw1.append( "start polling...")
            return 0



    def nxtPoll3CB(self):
        #print("ODIA"+ str(self.uc6_AO.orders.ordersAsk_Di))
        #print("ODIB"+ str(self.uc6_AO.orders.ordersBid_Di))
        ui =  self.ui_nxtWin3
        ui.kled_poll3.setColor(self.blinkerCols[0]) # activity indicator
        self.blinkerCols.reverse()

        start = ui.lineEdit_tradesStart.text()
        stop = ui.lineEdit_tradesStop.text()

        #print("this is where the object is from")
        self.uc6_AO.getOrders(self.selAssetId) # divert to BA there



        self.uc8_Trades.getTrades(self.selAssetId, start, stop) # divert to BA there



    def setPollTimer3_Clk(self,):
        ui = self.ui_nxtWin3
        self.pollTime3 = ui.lineEdit_pollTimer3.text()
        self.togglePoll3_CB()
        self.confLED3_cy()
        return 0

 ##############
 ##############
 ##############
 ##############
    #
    def cb_oIss_Clk(self):
        ui = self.ui_nxtWin3

        if not ui.cb_oIss.isChecked(): # was ON is now off, needs to do what is needed to OFF
            self.uc2_AH.accFOC = self.uc2_AH.accRes
        if ui.cb_oIss.isChecked(): # was OFF is now on, needs to do what is needed to ON
            self.uc2_AH.accFOC = ui.lineEdit_orderIss.text()

        self.confLED3_strobe1()

    def confLED3_strobe1(self):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.cyan)
        self.strobeC=0
        self.timerStrobe3.start(100)

    def confLED3_strobe4(self):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(self.strobeCols[0])
        self.strobeCols.reverse()
        self.strobeC += 1
        if self.strobeC > 15:
            self.strobeC = 0
            self.timerStrobe3.stop()
            self.confLED3_OK()

    def confLED3_OK(self, fTime = 1000):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.green)
        self.pollTimer3.singleShot(fTime,self.confLED3_off)

    def confLED3_cy(self):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.cyan)
        self.pollTimer3.singleShot(500,self.confLED3_off)

    def confLED3_ma(self):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.magenta)
        self.pollTimer3.singleShot(1000,self.confLED3_off)

    def confLED3_notOK(self, fTime = 1000):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.red)
        self.pollTimer3.singleShot(fTime,self.confLED3_off)

    def confLED3_off(self):
        ui = self.ui_nxtWin3
        ui.kled_conf3.setColor(Qt.Qt.darkBlue)

    def clearText(self):
        ui = self.ui_nxtWin3
        ui.textEdit_response.clear()
        disclaimer2 = "Thank You. \n\n Enter passphrase above and hit <return>"
        ui.textEdit_response.append( disclaimer2)



############################
############################        
############################
########## Window Maintenance

    
    def show(self):
        self.uiFrame = QtGui.QMainWindow()
        self.ui_nxtWin3.setupUi(self.uiFrame)
        self.init() #self.ui_AlgoWin)
        self.uiFrame.show()     


        
        
        
        
        
